diff --git a/node_modules/bitcoinjs-lib/src/psbt.d.ts b/node_modules/bitcoinjs-lib/src/psbt.d.ts
index de7bbb3..70b6ffe 100644
--- a/node_modules/bitcoinjs-lib/src/psbt.d.ts
+++ b/node_modules/bitcoinjs-lib/src/psbt.d.ts
@@ -118,6 +118,8 @@ export declare class Psbt {
     addUnknownKeyValToInput(inputIndex: number, keyVal: KeyValue): this;
     addUnknownKeyValToOutput(outputIndex: number, keyVal: KeyValue): this;
     clearFinalizedInput(inputIndex: number): this;
+    getDigestToSign(inputIndex: number, publicKey: Buffer, sighashTypes?: number[]): { hash: Buffer; sighashType: any }
+    addSignedDigest(inputIndex: number, publicKey: Buffer, signature: Buffer, sighashType: any): this;
 }
 interface PsbtOptsOptional {
     network?: Network;
diff --git a/node_modules/bitcoinjs-lib/src/psbt.js b/node_modules/bitcoinjs-lib/src/psbt.js
index 71c3589..5270d15 100644
--- a/node_modules/bitcoinjs-lib/src/psbt.js
+++ b/node_modules/bitcoinjs-lib/src/psbt.js
@@ -912,6 +912,25 @@ class Psbt {
     this.data.clearFinalizedInput(inputIndex);
     return this;
   }
+  getDigestToSign(inputIndex, publicKey, sighashTypes = [transaction_1.Transaction.SIGHASH_ALL]) {
+    return getHashAndSighashType(
+      this.data.inputs,
+      inputIndex,
+      publicKey,
+      this.__CACHE,
+      sighashTypes,
+    );
+  }
+  addSignedDigest(inputIndex, publicKey, signature, sighashType){
+    const partialSig = [
+      {
+        pubkey: publicKey,
+        signature: bscript.signature.encode(signature, sighashType),
+      },
+    ];
+    this.data.updateInput(inputIndex, { partialSig });
+    return this
+  }
 }
 exports.Psbt = Psbt;
 /**
@@ -1299,7 +1318,8 @@ function getAllTaprootHashesForSig(inputIndex, input, inputs, cache) {
 }
 function getPrevoutTaprootKey(inputIndex, input, cache) {
   const { script } = getScriptAndAmountFromUtxo(inputIndex, input, cache);
-  return (0, psbtutils_1.isP2TR)(script) ? script.subarray(2, 34) : null;
+  // return (0, psbtutils_1.isP2TR)(script) ? script.subarray(2, 34) : null; // script.subarray is returning an array for an unknown reason(due to React Nativeâ€™s underlying js implementation?) while we require a buffer
+  return (0, psbtutils_1.isP2TR)(script) ? Buffer.from(script.subarray(2, 34)) : null;
 }
 function trimTaprootSig(signature) {
   return signature.length === 64 ? signature : signature.subarray(0, 64);
